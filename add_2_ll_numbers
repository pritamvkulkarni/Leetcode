/*
2. Add Two Numbers

You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.
*/
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {

        if(!l1) return l2;
        if(!l2) return l1;

        ListNode* ans = NULL;
        ListNode* head = NULL;

        int c=0,sum=0;

        while(l1 || l2 || c) {
            sum = 0;
            if(l1) {
                sum+=(l1->val);
                l1=l1->next;
            }
            if(l2) {
                sum+=(l2->val);
                l2=l2->next;
            }
            sum+=c;
            c = sum/10;
            if(ans) {
                ans->next = new ListNode(sum%10);
                ans = ans->next;
            } else {
                ans = new ListNode(sum%10);
                head = ans;
            }
        }

        return head;

    }
};